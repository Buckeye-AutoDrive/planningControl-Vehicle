function [allData, scenario, sensors] = scenario_SS_TL_junction()
%scenario_SS_TL_junction - Returns sensor detections
%    allData = scenario_SS_TL_junction returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scenario_SS_TL_junction optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.11 (R2021b) and Automated Driving Toolbox 3.4 (R2021b).
% Generated on: 25-May-2022 20:11:55

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);
    isValidLaneTime = false(1, numSensors);
    isValidPointCloudTime = false(1, numSensors);
    isValidINSTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
    % Generate the ego vehicle lane boundaries
    if isa(sensor, 'visionDetectionGenerator')
        maxLaneDetectionRange = min(500,sensor.MaxRange);
        lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
    end
        type = getDetectorOutput(sensor);
        if strcmp(type, 'Objects only')
            [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes only')
            [laneDets, ~, isValidTime(sensorIndex)] = sensor(lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes and objects')
            [objectDets, numObjects, isValidTime(sensorIndex), laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'Lanes with occlusion')
            [laneDets, ~, isValidLaneTime(sensorIndex)] = sensor(poses, lanes, time);
            laneDetections   = [laneDetections laneDets]; %#ok<AGROW>
        elseif strcmp(type, 'PointCloud')
            if sensor.HasRoadsInputPort
                rdmesh = roadMesh(egoVehicle,min(500,sensor.MaxRange));
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, rdmesh, time);
            else
                [ptCloud, isValidPointCloudTime(sensorIndex)] = sensor(poses, time);
            end
            ptClouds = [ptClouds; ptCloud]; %#ok<AGROW>
        elseif strcmp(type, 'INSMeasurement')
            insMeasCurrent = sensor(actorState, time);
            insMeas = [insMeas; insMeasCurrent]; %#ok<AGROW>
            isValidINSTime(sensorIndex) = true;
        end
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime) || any(isValidLaneTime) || any(isValidPointCloudTime) || any(isValidINSTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.9 0], ...
    'MinObjectImageSize', [1 1], ...
    'DetectorOutput', 'Lanes and objects', ...
    'Intrinsics', cameraIntrinsics([100 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [1.5 0 0.2], ...
    'TargetReportFormat', 'Detections', ...
    'FieldOfView', [180 5], ...
    'Profiles', profiles);
numSensors = 2;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [0.8 0.4 0;
               258.4 0.5 0];
marking = [laneMarking('Solid')
laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [47.8 -129 0;
               49.1 40.7 0];
marking = [laneMarking('Solid')
laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [159.3 -132.2 0;
               159.63 4.16 0];
marking = [laneMarking('Solid')
laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road2');

roadCenters = [2.95 -87.55 0;
               260.1 -87.8 0];
marking = [laneMarking('Solid')
laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road3');

roadCenters = [205.1 -135 0;
               228 -62.2 0;
               233.4 33.9 0];
marking = [laneMarking('Solid')
laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36])
laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road4');

roadCenters = [41.46 -1.4 0;
               45.32 -3.03 0;
               46.84 -6.92 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road5');

roadCenters = [152.38 -1.38 0;
               156.06 -2.9 0;
               157.76 -6.9 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road6');

roadCenters = [40.85 -89.37 0;
               44.49 -91.25 0;
               46.23 -94.89 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road7');

roadCenters = [152.19 -89.53 0;
               156.06 -91.28 0;
               157.57 -95.05 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road8');

roadCenters = [226.22 -1.33 0;
               229.9 -2.83 0;
               231.6 -6.85 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road9');

roadCenters = [212.06 -89.64 0;
               215.69 -91.48 0;
               216.6 -97.73 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road10');

roadCenters = [41.34 2.26 0;
               45.05 3.9 0;
               46.93 7.87 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road11');

roadCenters = [50.67 7.75 0;
               52.39 3.9 0;
               56.08 2.26 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road12');

roadCenters = [50.51 -6.89 0;
               52.37 -3.11 0;
               56.17 -1.41 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road13');

roadCenters = [161.42 -6.86 0;
               163.17 -2.86 0;
               167.08 -1.38 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road14');

roadCenters = [235.19 -6.86 0;
               236.73 -3.2 0;
               240.85 -1.38 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road15');

roadCenters = [221.31 -95.09 0;
               224.04 -91.2 0;
               228.22 -89.61 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road16');

roadCenters = [161.15 -95.02 0;
               163 -91.36 0;
               166.81 -89.54 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road17');

roadCenters = [49.85 -94.88 0;
               51.6 -91.11 0;
               55.51 -89.4 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road18');

roadCenters = [235.393 7.79 0;
               236.98 3.94 0;
               240.803 2.3 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road19');

roadCenters = [225.71 -79.91 0;
               226.54 -84.34 0;
               230.253 -85.95 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road20');

roadCenters = [161.253 -80.4 0;
               162.87 -84.42 0;
               166.663 -85.89 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road21');

roadCenters = [50.023 -80.22 0;
               51.61 -84.08 0;
               55.433 -85.71 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road22');

roadCenters = [40.75 -85.753 0;
               44.42 -84.17 0;
               46.34 -80.143 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road23');

roadCenters = [151.97 -85.8533 0;
               155.64 -84.15 0;
               157.56 -80.2433 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road24');

roadCenters = [215.45 -85.8933 0;
               219.34 -84.39 0;
               221.46 -81.29 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road25');

roadCenters = [226.18 2.34667 0;
               229.98 3.94 0;
               231.77 7.95667 0];
roadWidth = 3.6;
road(scenario, roadCenters, roadWidth, 'Name', 'Road26');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [3.8 -2.6 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [3.8 -1.24 0;
             10.1 -1.24 0;
             14.3 -1.24 0;
             19.2 -1.24 0;
             25.7 -1.24 0;
             30.9 -1.24 0;
             36.3 -1.24 0;
             41 -1.24 0;
             45.3 -1.24 0;
             49.8 -1.24 0;
             53.7 -1.24 0;
             57.9 -1.24 0;
             62.6 -1.24 0;
             69 -1.24 0;
             75.3 -1.24 0;
             82.2 -1.24 0;
             89.5 -1.24 0;
             95.6 -1.24 0;
             103.1 -1.24 0;
             112.5 -1.24 0;
             123.4 -1.24 0;
             132.1 -1.24 0;
             142.6 -1.24 0;
             149.2 -1.24 0;
             155.3 -1.24 0;
             162.3 -1.24 0;
             170 -1.24 0;
             176.3 -1.24 0;
             181.7 -1.24 0;
             187.2 -1.24 0;
             192.2 -1.24 0;
             198.68 -1.24 0;
             204.17 -1.23 0.01;
             211.79 -1.23 0.01;
             219.67 -1.25 0.01;
             222.75 -1.24 0.01;
             224.67 -1.26 0.01;
             225.72 -1.28 0.01;
             226.7 -1.3 0.01;
             227.87 -1.44 0.01;
             229.04 -1.83 0.01;
             230.08 -2.49 0.01;
             230.96 -3.83 0.01;
             231.34 -5.1 0.01;
             231.53 -6.67 0.01;
             231.56 -7.93 0.01;
             231.51 -10.06 0.01;
             231.36 -12.89 0.01;
             230.79 -22.15 0.01;
             230.14 -33.58 0.01;
             228.92 -44.61 0.01;
             227.58 -53.38 0.01;
             226.14 -61.55 0.01;
             224.58 -68.93 0.01;
             223.47 -73.55 0.01;
             222.49 -77.42 0.01;
             221.83 -79.53 0.01;
             221.17 -81.5 0.01;
             220.37 -83.45 0.01;
             218.69 -85.05 0.01;
             216.83 -85.71 0.01;
             214.78 -85.9 0.01;
             213.02 -85.83 0.01;
             210.98 -85.8 0.01;
             208.17 -85.83 0.01;
             201.31 -85.82 0.01;
             193.2 -85.9 0;
             181 -85.9 0;
             171.5 -85.9 0;
             156.9 -86 0;
             134.9 -86 0;
             103.7 -85.6 0;
             80.5 -85.7 0;
             65.72 -85.78 0.01;
             57.98 -85.73 0.01;
             55.11 -85.75 0.01;
             52.96 -85.5 0.01;
             51.25 -84.46 0.01;
             50.31 -82.75 0.01;
             49.96 -79.99 0.01;
             49.94 -76.41 0.01;
             50 -73.2 0.01;
             50 -61.81 0.01;
             50.4 -39.5 0;
             50.6 -22.6 0;
             50.8 -9.7 0;
             50.9 13.9 0;
             51.2 31.6 0];
speed = [50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50;50];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
smoothTrajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
actor(scenario, ...
    'ClassID', 7, ...
    'Length', 0.1, ...
    'Width', 0.7, ...
    'Height', 0.7, ...
    'Position', [40.753 -3.986 0], ...
    'PlotColor', [255 0 0] / 255, ...
    'Name', 'Stop Sign');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 0.1, ...
    'Width', 0.2, ...
    'Height', 0.7, ...
    'Position', [159.34 0.63 5.1], ...
    'PlotColor', [0 0 0] / 255, ...
    'Name', 'Traffic_Light');

bicycle = actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [198.472608050177 -85.8162226579835 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'PlotColor', [0.85 0.325 0.098], ...
    'Name', 'Bicycle');
waypoints = [198.472608050177 -85.8162226579835 0;
             187.5 -85.8 0;
             173.9 -85.6 0;
             166.6 -85.7 0;
             164 -85.5 0;
             161.86 -83.83 0.01;
             161.2 -81.34 0.01;
             160.9 -77 0;
             160.9 -71.5 0;
             160.9 -64.8 0];
speed = [5;5;5;5;5;5;5;5;5;5];
trajectory(bicycle, waypoints, speed);

pedestrian = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [153.705204681227 -5.06984155176635 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.929 0.694 0.125], ...
    'Name', 'Pedestrian');
waypoints = [153.705204681227 -5.06984155176635 0;
             153.72 -1.26 0.01;
             153.69 5.28 0];
speed = [1.5;0;3];
waittime = [0;5;0];
trajectory(pedestrian, waypoints, speed, waittime);

actor(scenario, ...
    'ClassID', 7, ...
    'Length', 0.1, ...
    'Width', 0.7, ...
    'Height', 0.7, ...
    'Position', [225.049666666667 -3.796 0], ...
    'PlotColor', [255 0 0] / 255, ...
    'Name', 'Stop Sign1');

car1 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [50.3555193678119 -21.2920674781278 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.494 0.184 0.556], ...
    'Name', 'Car1');
waypoints = [50.3555193678119 -21.2920674781278 0;
             50.5 -14.2 0;
             50.6 -10.3 0;
             50.4 -7.25 0.01;
             50.84 -5.05 0.01;
             52 -3 0.01;
             55.08 -1.32 0.01;
             61.6 -1.2 0;
             76.6 -1.1 0;
             88.5 -1 0;
             99.5 -1 0;
             111.7 -1.1 0;
             123.1 -1.1 0;
             136.1 -1.3 0;
             147.4 -1.3 0;
             152.6 -1.2 0;
             155.93 -2.19 0.01;
             157.41 -4.05 0.01;
             157.9 -6.7 0;
             157.9 -11.2 0;
             157.9 -15.9 0];
speed = [5;5;5;0;5;5;5;5;0;5;5;5;5;5;5;5;5;5;5;5;5];
waittime = [0;0;0;2;0;0;0;0;3;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(car1, waypoints, speed, waittime);

car2 = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [158.02 -19.29 0.01], ...
    'Mesh', driving.scenario.carMesh, ...
    'PlotColor', [0.466 0.674 0.188], ...
    'Name', 'Car2');
waypoints = [158.02 -19.29 0.01;
             157.97 -28.14 0.01;
             157.72 -50.12 0.01;
             157.62 -68.41 0.01;
             157.65 -79.1 0.01;
             157.23 -82.75 0.01;
             155.64 -84.76 0.01;
             153.4 -85.8 0;
             150.7 -85.9 0;
             141.8 -86 0;
             135.2 -86.1 0;
             99.1 -85.6 0;
             69.2 -85.4 0;
             59.7 -85.4 0;
             55.45 -85.56 0.01;
             52.09 -85.06 0.01;
             50.54 -83.55 0.01;
             49.92 -80.75 0.01;
             49.8 -71.3 0;
             49.8 -64.2 0;
             50.4 -23.4 0;
             50.5 -7.2 0;
             51.45 -3.43 0.01;
             53.39 -1.81 0.01;
             58.88 -1.3 0.01;
             63.83 -1.09 0.01;
             67.03 -1.16 0.01;
             70.02 -1.26 0.01];
speed = [10;10;10;10;0;10;10;10;10;10;10;10;10;0;10;10;10;10;10;10;10;0;10;10;10;10;10;10];
waittime = [0;0;0;0;2;0;0;0;0;0;0;0;0;2;0;0;0;0;0;0;0;2;0;0;0;0;0;0];
trajectory(car2, waypoints, speed, waittime);

pedestrian1 = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [225.92 -3.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'PlotColor', [0.301 0.745 0.933], ...
    'Name', 'Pedestrian1');
waypoints = [225.92 -3.8 0;
             225.99 -1.08 0.01;
             225.93 4.54 0];
speed = [1.5;0;1.5];
waittime = [0;52;0];
trajectory(pedestrian1, waypoints, speed, waittime);

truck = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [161.4 -47.4 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'PlotColor', [0.635 0.078 0.184], ...
    'Name', 'Truck');
waypoints = [161.4 -47.4 0;
             161.5 -33.2 0;
             161.7 -16 0;
             161.8 -7.9 0;
             162.24 -4.15 0.01;
             163.72 -1.9 0.01;
             166.3 -1.1 0;
             169.3 -1.1 0;
             179.2 -1.1 0;
             218.6 -1.3 0;
             225.65 -1.12 0.01;
             227.97 -1.16 0.01;
             229.98 -0.92 0.01;
             232.17 -0.03 0.01;
             233.37 1.05 0.01;
             234.35 2.71 0.01;
             235.1 5.15 0.01;
             235.55 7.96 0.01;
             235.6 13.3 0;
             235.2 32.7 0];
speed = [7;7;7;0;7;7;7;7;7;7;7;7;7;7;7;7;7;7;7;7];
waittime = [0;0;0;5;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(truck, waypoints, speed, waittime);

function output = getDetectorOutput(sensor)

if isa(sensor, 'visionDetectionGenerator')
    output = sensor.DetectorOutput;
elseif isa(sensor, 'lidarPointCloudGenerator')
    output = 'PointCloud';
elseif isa(sensor, 'insSensor')
    output = 'INSMeasurement';
else
    output = 'Objects only';
end

