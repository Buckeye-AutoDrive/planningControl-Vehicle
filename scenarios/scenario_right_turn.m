function [allData, scenario, sensors] = scenario_right_turn()
%scenario_right_turn - Returns sensor detections
%    allData = scenario_right_turn returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scenario_right_turn optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.11 (R2021b) and Automated Driving Toolbox 3.4 (R2021b).
% Generated on: 12-Sep-2022 14:05:30

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
[sensors, numSensors] = createSensors(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    objectDetections = {};
    laneDetections   = [];
    ptClouds = {};
    insMeas = {};
    isValidTime = false(1, numSensors);

    % Generate detections for each sensor
    for sensorIndex = 1:numSensors
        sensor = sensors{sensorIndex};
        % Generate the ego vehicle lane boundaries
        if isa(sensor, 'visionDetectionGenerator')
            maxLaneDetectionRange = min(500,sensor.MaxRange);
            lanes = laneBoundaries(egoVehicle, 'XDistance', linspace(-maxLaneDetectionRange, maxLaneDetectionRange, 101));
        end
        [objectDets, numObjects, isValidTime(sensorIndex)] = sensor(poses, time);
        objectDetections = [objectDetections; objectDets(1:numObjects)]; %#ok<AGROW>
    end

    % Aggregate all detections into a structure for later use
    if any(isValidTime)
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release all the sensor objects so they can be used again.
for sensorIndex = 1:numSensors
    release(sensors{sensorIndex});
end

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function [sensors, numSensors] = createSensors(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensors{1} = visionDetectionGenerator('SensorIndex', 1, ...
    'MinObjectImageSize', [5 5], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 799.999999999999],[320 240],[480 640]), ...
    'ActorProfiles', profiles);
sensors{2} = drivingRadarDataGenerator('SensorIndex', 2, ...
    'MountingLocation', [3.7 0 0.5], ...
    'RangeLimits', [0 100], ...
    'HasNoise', false, ...
    'TargetReportFormat', 'Detections', ...
    'HasElevation', true, ...
    'HasOcclusion', false, ...
    'HasFalseAlarms', false, ...
    'FieldOfView', [35 50], ...
    'Profiles', profiles);
numSensors = 2;

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = drivingScenario;

% Add all road segments
roadCenters = [-5.9 0.4 0;
    49.7 0.2 0];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road');

roadCenters = [46.08 3.78 0;
    46.18 -48.02 0];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Color', [0.98 0.86 0.36])
    laneMarking('Solid')];
laneSpecification = lanespec(2, 'Marking', marking);
road(scenario, roadCenters, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [35.6 -0.35 0;
    42.55 -2.83 0;
    45.53 -9.75 0];
road(scenario, roadCenters, 'Name', 'Road');

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-4.1603370851845 -1.36729165216925 0.01], ...
    'FrontOverhang', 0.9, ...
    'Wheelbase', 2.8, ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'Car');
waypoints = [-4.1603370851845 -1.36729165216925 0.01;
    6.41 -1.3673 0.01;
    18.9 -1.3673 0.01;
    28.87 -1.3673 0.01;
    34.95 -1.3673 0.01;
    36.7 -1.4 0;
    37.94 -1.55 0.01;
    38.94 -1.78 0.01;
    39.88 -2.07 0.01;
    40.77 -2.48 0;
    41.61 -2.97 0.01;
    42.39 -3.58 0.01;
    43.02 -4.34 0.01;
    43.53 -5.2 0.01;
    43.88 -6.07 0;
    44.13 -6.97 0;
    44.34 -8.07 0;
    44.44 -9.18 0.01;
    44.49 -10.21 0;
    44.49 -11.35 0;
    44.49 -15.39 0.01;
    44.49 -22.79 0.01;
    44.49 -31.46 0.01;
    44.49 -40.24 0.01;
    44.49 -47.53 0.01];
speed = [30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30;30];
waittime = [0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0];
trajectory(egoVehicle, waypoints, speed, waittime);

% Add the non-ego actors
actor(scenario, ...
    'ClassID', 7, ...
    'Length', 0.7, ...
    'Width', 0.2, ...
    'Height', 0.1, ...
    'Position', [47.6 0.0999999999999979 0], ...
    'Pitch', 90, ...
    'Name', 'Traffic_Light');

actor(scenario, ...
    'ClassID', 8, ...
    'Length', 0.01, ...
    'Width', 0.7, ...
    'Height', 0.7, ...
    'Position', [35.77 -4.58 0], ...
    'PlotColor', [255 0 0] / 255, ...
    'Name', 'Stop Sign');

